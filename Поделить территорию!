using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace Rivals
{
	public class RivalsTask
	{
		public static IEnumerable<OwnedLocation> AssignOwners(Map map)
		{
			var visited = new HashSet<Point>();
			var queue = new Queue<OwnedLocation>();
			for (var i = 0; i < map.Players.Length; i++)
			{
				queue.Enqueue(new OwnedLocation(i, new Point(map.Players[i].X, map.Players[i].Y), 0));
				visited.Add(new Point(map.Players[i].X, map.Players[i].Y));
			}

			while (queue.Count != 0)
			{
				var location = queue.Dequeue();
				foreach (var point in GetIncidentPoints(location.Location)
					.Where(p => !visited.Contains(p) && map.InBounds(p) && map.Maze[p.X, p.Y] == MapCell.Empty))
				{
					queue.Enqueue(new OwnedLocation(location.Owner, point, location.Distance + 1));
					visited.Add(point);
				}

				yield return location;
			}
		}

		private static IEnumerable<Point> GetIncidentPoints(Point point)
		{	
			yield return new Point(point.X + 1, point.Y);
			yield return new Point(point.X, point.Y + 1);
			yield return new Point(point.X - 1, point.Y);
			yield return new Point(point.X, point.Y - 1);
		}
	}
}
