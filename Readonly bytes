using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace hashes
{
	public class ReadonlyBytes : IEnumerable<byte>
	{
		private readonly byte[] values;
		private int Hash { get; set; }
		public int Length => values.Length;

		
		public ReadonlyBytes(params byte[] values)
		{
			this.values = values ?? throw new ArgumentNullException();
			Hash = CalculateHash(values);
		}

		private int CalculateHash(byte[] bytes)
		{
			unchecked
			{
				const uint fnvPrime = 0x01000193;
				uint hash = 0x811C9DC5;
				for (int i = 0; i < values.Length; i++)
				{
					hash ^= values[i];
					hash *= fnvPrime;
				}
				return (int) hash;
			}
		}

		public byte this[int index]
		{
			get
			{
				if (index < 0 || index >= values.Length) throw new IndexOutOfRangeException();
				return values[index];
			}
		}

		public override bool Equals(object obj)
		{
			if (!(obj is ReadonlyBytes)) return false;
			var array = obj as ReadonlyBytes;
			if (array.Length != values.Length) return false;
			for (var i = 0; i < values.Length; i++)
				if (values[i] != array[i])
					return false;
			return true;
		}

		public override int GetHashCode()
		{
			return Hash;
		}

		public override string ToString()
		{
			var str = new StringBuilder("[");
			foreach (var value in values)
				str.Append(value.ToString() + ", ");
			if (values.Length > 0) str.Remove(str.Length - 2, 2);
			return str.Append("]").ToString();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		public IEnumerator<byte> GetEnumerator()
		{
			foreach (var value in values)
			{
				yield return value;
			}
		}
	}
}
